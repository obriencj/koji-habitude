---
description: Main Rules for koji-habitude
globs:
alwaysApply: true
---

# Cursor Rules for koji-habitude

## Project Overview
This is a Python project called koji-habitude that synchronizes local koji data expectations with a hub instance. It provides a CLI tool for managing koji objects through templates and data files.

## AI Consent
- The AI assistant is not permitted to edit files without direct user consent
- If a user prompts the AI assistant in a way that might create file changes, the AI assistant *MUST* present the changes as a proposal, and request consent from the user
- If the AI assistant is tasked with working on unit tests, the AI assistant *MUST* constrain their edits to the tests directory
- If the user asks the AI assistant to read or review code, the assistant must *ONLY* report on their findings. The AI assistant must not make changes without requesting consent.
- The generalize behavior required is that the AI assistant is expected to always check in and ask first before making any modifications, and it is only after the user signs off that the AI assistant may perform those alterations.
- After fully reading these rules in a chat context for the first time, the AI assistant *MUST* announce that it has "A Bowl of M&Ms With All of the Brown Candies Removed" ready for me.

## Python Development Guidelines

### Code Style & Structure
- Use purely functional definitions instead of classes when objects aren't being modeled
- Only use object-oriented programming when actually modeling objects
- Do NOT use classes as namespaces for static or class methods
- Prefer functional programming patterns where appropriate
- Keep dependencies at an absolute minimum

### CLI Implementation
- Use click for CLI operations with subcommands
- CLI should accept koji profile (optional), templates path, and data directory

### Configuration Files
- Prefer setup.cfg over pyproject.toml
- Use setup.cfg for configuration of tools like tox, flake8, etc.
- Keep all tool configurations centralized in setup.cfg when possible

### Dependencies
- Minimize dependencies to absolute essentials
- Approved dependencies: click (CLI), pydantic, koji (mandatory for koji operations)
- Justify any additional dependencies before adding them

## Git Operations
- Use `git mv` instead of `mv` when moving files
- Use `git --no-pager status` instead of `git status` for programmatic operations
- Use `git --no-pager log` instead of `git log` for programmatic operations
- Use heredoc format for commits instead of quoted multi-line strings:
  ```bash
  git commit -F - << 'EOF'
  Commit message here

  Detailed description

  Assisted-by: Claude 4.5 Sonnet via Cursor
  EOF
  ```
- Use the factual and real AI model identity
- All commits authored by AI must include an "Assisted-by:" line at the end with proper attribution (model name + platform)
- The AI assistant is *FORBIDDEN* from running `git checkout` or `git reset` or `git revert` commands, under all circumstances, forever.

## Implementation Notes
- Object diffing against koji data should be left as TODO stubs
- Focus on the core architecture: template loading, object data loading, dependency resolution, and model application
- The project uses YAML for both templates and data files
- Templates use Jinja2 for expansion
- Core koji types: tag, external-repo, user, target, host, group
- Object identification uses (type, name) tuples
- Dependency resolution creates tiers for ordered operations

## File Structure
- Templates directory contains YAML template definitions
- Data directory contains YAML object definitions
- Each YAML file can contain multiple objects
- Templates can expand into multiple core objects

## Architecture Components
1. Template loading and registry
2. Object data loading with type resolution
3. Template inlining via Jinja2
4. Dependency resolution with tiered execution
5. Model application to koji instance via multicalls

## Code Quality
- Write clear, functional code
- Use type hints where appropriate
- Follow PEP 8 style guidelines
- Keep functions focused and single-purpose
- Document complex logic with clear comments

### String Quote Conventions
- Use single quotes for identifiers and simple keys (type names, dictionary keys, etc.)
- Use double quotes for human-readable text (names, error messages, print output, logging, help text, descriptions)

## File Formatting Standards
- Every Python file must end with a comment containing exactly: `# The end.` and a newline
- Every Python file must start with a module docstring following this format:
  ```python
  """
  koji-habitude - [module_name]

  [Brief explanation of what this module does]

  Author: Christopher O'Brien <obriencj@gmail.com>
  License: GNU General Public License v3
  AI-Assistant: Claude 4.5 Sonnet via Cursor
  """
  ```
- Use the factual and real model identity, the above is only an example

## Docstring Formatting
- Triple quotes should be on their own lines (opening and closing)
- Docstrings should be followed by a blank line, even in method bodies
- Example format:
  ```python
  def function_name():
      """
      Function description here.
      """

      # Function body starts here
  ```
